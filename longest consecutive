Better approach

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0) return 0;
        sort(nums.begin(),nums.end());
        int longest = 1;
        int lastsmall = INT_MIN;
        int cnt = 1;
        for(int i = 0;i<nums.size();i++)
        {
            if(nums[i] - 1 == lastsmall)
            {
                cnt+=1;
                lastsmall = nums[i];
            }
            else if(nums[i] != lastsmall)
            {
                cnt = 1;
                lastsmall = nums[i];
            }
            longest = max(longest,cnt); 
        }
    return longest;
    }
};

optimal approach 

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0)return 0;
        unordered_set<int> st(nums.begin(),nums.end());
        int longest = 1;
        for(auto it : st)
        {
            if(st.find(it - 1 ) == st.end())
            {
                int cnt = 1;
                int x = it;
                while(st.find(x + 1) != st.end())
                {
                    x +=1;
                    cnt +=1;
                }
                longest = max(cnt,longest);
            }
        }
        return longest;

    }
};
