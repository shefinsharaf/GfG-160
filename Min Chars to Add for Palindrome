class Solution {
  public:
    vector<int>LPSArray(string &pat){
        int m = pat.size();
        vector<int>lps(m);
        int len = 0;
        lps[0] =0;
        int i = 1;
        while(i < m)
        {
            if(pat[i] ==pat[len])
            {
                len++;
                lps[i] = len;
                i++;
            }
            else
            {
                if(len != 0)
                len = lps[len-1];
                else
                {
                    lps[i] =0;
                    i+=1;
                }
            }
        }return lps;
        
    }
  
    int minChar(string& s) {
        int n = s.size();
        string s2 = s;
        reverse(s2.begin(),s2.end());
        string pat = s +"$"+s2;
        
        vector<int>lps = LPSArray(pat);
        
        return (n-lps.back());
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string str;
        cin >> str;
        Solution ob;
        int ans = ob.minChar(str);
        cout << ans << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
